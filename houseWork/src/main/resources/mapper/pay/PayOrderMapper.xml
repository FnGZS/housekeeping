<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.houseWork.dao.pay.PayOrderDao">
	<sql id="PayOrderBackfields">
		id,
		goodsId,
		payPrice,
		totalPrice,
		employerId,
		clearnerId,
		employerName,
		employerPhone,
		address,
		content,
		picUrl,
		unitPrice,
		videoUrl,
		area,
		level,
		longTime,
		chargingType,
		goodsType,
		logistics,
		orderState,
		delFlag,
		startTime,
		endTime,
		gmtCreated,
		gmtModified
	</sql>
	<select id="getPayOrderById"
		resultType="com.houseWork.entity.pay.PayOrder">
		select
		<include refid="PayOrderBackfields" />
		from payOrder
		where id=#{id}
	</select>
	<select id="listPayOrderByCondition"
		parameterType="com.houseWork.entity.pay.SearchPayOrderParam"
		resultType="com.houseWork.entity.pay.PayOrder">
		select id,
		goodsId,
		sum(payPrice) payPrice,
		totalPrice,
		employerId,
		clearnerId,
		employerName,
		employerPhone,
		address,
		content,
		picUrl,
		videoUrl,
		area,
		level,
		longTime,
		chargingType,
		Max(goodsType) goodsType,
		logistics,
		orderState,
		delFlag,
        unitPrice,
		startTime,
		endTime,
		gmtCreated,
		gmtModified
		from payOrder
		<where>
			<if test="clearnerId != null">
				clearnerId=#{clearnerId}
			</if>
			<if test="employerId != null">
				and employerId=#{employerId}
			</if>
			<if test="goodsWay != null">
				<choose>
					<when test="goodsType != null">
						and goodsType=#{goodsType}
					</when>
					<when test="goodsWays == 0">
						and goodsType=#{goodsWays}
					</when>
					<otherwise>
						and goodsType!=#{goodsWay}
					</otherwise>
				</choose>
			</if>

			<if test="chargingType != null">
				and chargingType=#{chargingType}
			</if>
			<if test="orderState != null">
				and orderState=#{orderState}
			</if>
			<if test="logistics != null">
				and logistics=#{logistics}
			</if>
			and delFlag=0
		</where>
		group by goodsId
		order by gmtCreated desc,orderState desc
	</select>

	<select id="listPayOrderByGoodsId"
		resultType="com.houseWork.entity.pay.PayOrder">
		select
		<include refid="PayOrderBackfields"/>
		from payOrder
		where goodsId=#{goodsId}
		order by gmtCreated desc
	</select>
    <select id="getRefundApply" resultType="com.houseWork.entity.pay.RefundApply">
        select * from refundApply where goodsId=#{goodsId} limit 1
    </select>
    <select id="getRefundApplyToRefund" resultType="com.houseWork.entity.pay.RefundApply">
        select r.* from refundApply r left  join payOrder p on p.goodsId=r.goodsId
        where p.orderState=1 and  r.gmtCreated between DATE_SUB(now(),interval 6 hour ) and now()
    </select>
    <select id="listPayOrderCountByCondition" resultType="java.util.Map">
		select count(1) as total ,IFNULL (sum(if(orderState=1,1,0)),0) wait,IFNULL (sum(if(orderState=2,1,0)),0) successs,IFNULL (sum(if(orderState=3,1,0)),0) fail,IFNULL (sum(if(orderState=4,1,0)),0) close
		 from
		(select * from payOrder
		<where>
			<if test="clearnerId != null">
				clearnerId=#{clearnerId}
			</if>
			<if test="employerId != null">
				and employerId=#{employerId}
			</if>
			<if test="goodsWay != null">
				<choose>
					<when test="goodsType != null">
						and goodsType=#{goodsType}
					</when>
					<when test="goodsWays == 0">
						and goodsType=#{goodsWays}
					</when>
					<otherwise>
						and goodsType!=#{goodsWay}
					</otherwise>
				</choose>
			</if>

			<if test="chargingType != null">
				and chargingType=#{chargingType}
			</if>
			<if test="orderState != null">
				and orderState=#{orderState}
			</if>
			<if test="logistics != null">
				and logistics=#{logistics}
			</if>
			and delFlag=0
		</where>
		group by goodsId )a

	</select>
    <update id="updatePayOrder"
		parameterType="com.houseWork.entity.pay.PayOrder">
		update
		payOrder
		<set>
			<if test="payPrice != null">
				payPrice=#{payPrice},
			</if>
			<if test="totalPrice != null">
				totalPrice=#{totalPrice},
			</if>
			<if test="employerId != null">
				employerId=#{employerId},
			</if>
			<if test="clearnerId != null">
				clearnerId=#{clearnerId},
			</if>
			<if test="employerName != null">
				employerName=#{employerName},
			</if>
			<if test="employerPhone != null">
				employerPhone=#{employerPhone},
			</if>
			<if test="address != null">
				address=#{address},
			</if>
			<if test="content != null">
				content=#{content},
			</if>
			<if test="picUrl != null">
				picUrl=#{picUrl},
			</if>
			<if test="videoUrl != null">
				videoUrl=#{videoUrl},
			</if>
            <if test="unitPrice != null">
                unitPrice=#{videoUrl},
            </if>
			<if test="level != null">
				level=#{level},
			</if>
			<if test="longTime != null">
				longTime=#{longTime},
			</if>
			<if test="chargingType != null">
				chargingType=#{chargingType},
			</if>
			<if test="goodsType != null">
				goodsType=#{goodsType},
			</if>
			<if test="logistics != null">
				logistics=#{logistics},
			</if>
			<if test="orderState != null">
				orderState=#{orderState},
			</if>
			<if test="delFlag != null">
				delFlag=#{delFlag},
			</if>
			<if test="startTime != null">
				startTime=#{startTime},
			</if>
			<if test="endTime != null">
				endTime=#{endTime},
			</if>
			<if test="gmtModified != null">
				gmtModified=now()
			</if>
		</set>
		<where>
			<if test="id != null">
				id=#{id}
			</if>
			<if test="goodsId != null">
				and goodsId=#{goodsId}
			</if>
		</where>
	</update>
    <update id="updateOrderStatusClose">
		update payOrder set orderState = 4 where orderState=3 and date_add(endTime,interval 5 minute) &lt; now()
	</update>
    <insert id="insertPayOrder"
		parameterType="com.houseWork.entity.pay.PayOrder">

		insert into payOrder
		( id,
		goodsId,
		payPrice,
		totalPrice,
		employerId,
		clearnerId,
		employerName,
		employerPhone,
		address,
		content,
		unitPrice,
		picUrl,
		videoUrl,
		area,
		level,
		longTime,
		chargingType,
		goodsType,
		logistics,
		orderState,
		delFlag,
		startTime,
		endTime,
		gmtCreated,
		gmtModified
		)
		values
		(
		#{id},
		#{goodsId},
		#{payPrice},
		#{totalPrice},
		#{employerId},
		#{clearnerId},
		#{employerName},
		#{employerPhone},
		#{address},
		#{content},
		#{unitPrice},
		#{picUrl},
		#{videoUrl},
		#{area},
		#{level},
		#{longTime},
		#{chargingType},
		#{goodsType},
		#{logistics},
		#{orderState},
		#{delFlag},
		#{startTime},
		#{endTime},
		now(),
		now()
		)
	</insert>

	<insert id="insertRefundApply">
	insert into refundApply
	(
	id,
	goodsId,
	refundType,
	refundContent,
	picUrl,
	state,
	picVideo,
	gmtCreated,
	gmtModified
	)
	values (
	#{id},
	#{goodsId},
	#{refundType},
	#{refundContent},
	#{picUrl},
	#{state},
	#{picVideo},
	now(),
	now()
	)
	</insert>
	<insert id="insertRefundOrder">
	insert into refundOrder
	(
	id,
	appid,
	mch_id,
	nonce_str,
	sign,
	transaction_id,
	out_trade_no,
	out_refund_no,
	refund_id,
	refund_fee,
	total_fee,
	cash_fee,
	gmt_created,
	gmt_modified
	)
	values
	(
	#{id,jdbcType=BIGINT},
	#{appid,jdbcType=VARCHAR},
	#{mch_id,jdbcType=VARCHAR},
	#{nonce_str,jdbcType=VARCHAR},
	#{sign,jdbcType=VARCHAR},
	#{transaction_id,jdbcType=VARCHAR},
	#{out_trade_no,jdbcType=VARCHAR},
	#{out_refund_no,jdbcType=VARCHAR},
	#{refund_id,jdbcType=VARCHAR},
	#{refund_fee,jdbcType=INTEGER},
	#{total_fee,jdbcType=INTEGER},
	#{cash_fee,jdbcType=INTEGER},
	now(),
	now())
	</insert>
</mapper>